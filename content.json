{"meta":{"title":"土豆丝不加辣","subtitle":"java后端爱好者-点滴记忆","description":null,"author":"houxiurong-侯秀荣","url":"http://xrhou.github.io"},"pages":[{"title":"About me","date":"2017-07-16T11:11:34.000Z","updated":"2017-07-20T06:23:28.000Z","comments":true,"path":"About/index.html","permalink":"http://xrhou.github.io/About/index.html","excerpt":"","text":"精简版侯秀荣男80后的尾巴爱好广泛，会点前段，能写后端，能玩JavaScript，photoshop，平时特宅。人生人生我做主！从小没有靠过谁，除了爸妈！ 大学混出来后去过北去过新疆、内蒙，南到过杭州，三亚等。大学暑期去过工地【扛过钢管，搬过砖头，安装过自来水】实习期间，因为实习公司使用的C、Python。大学毕设使用的Django做的毕设，获得优秀的评分^_^。后来离开实习公司，转战另一家公司因Java使用不熟悉，后离职，闭关修炼Java半年,自后并将Java后端作为自己的职业。选择做后端，是为最幸运的事。 正经版 通过拉钩网赞助的简历html"},{"title":"github | osc.china","date":"2017-07-16T11:37:15.000Z","updated":"2017-07-16T13:55:57.000Z","comments":true,"path":"Github/index.html","permalink":"http://xrhou.github.io/Github/index.html","excerpt":"","text":"githubhouxiurong’s Github oschinahouxiurong’s OSC"},{"title":"标签","date":"2017-07-16T07:12:00.000Z","updated":"2017-07-19T06:31:03.000Z","comments":true,"path":"tags/index.html","permalink":"http://xrhou.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"互联网创业公司黑话指南","slug":"互联网创业公司黑话指南","date":"2017-07-23T14:45:48.000Z","updated":"2017-07-23T15:14:44.000Z","comments":true,"path":"2017/07/23/互联网创业公司黑话指南/","link":"","permalink":"http://xrhou.github.io/2017/07/23/互联网创业公司黑话指南/","excerpt":"整理了一下互联网创业公司常用的黑话，供大家参考，可以避免理解上的偏差。你肯定听过其中几款，却未必了解当时说话人的怨念……在阅读过程中，请保持严肃，不要哄堂大笑。","text":"整理了一下互联网创业公司常用的黑话，供大家参考，可以避免理解上的偏差。你肯定听过其中几款，却未必了解当时说话人的怨念……在阅读过程中，请保持严肃，不要哄堂大笑。 老板黑话你来我办公室一下 = 老子又想到了绝妙的idea我们要专注用户体验 = 把界面画的好看点产品不够大气 = 我也不知道哪不好反正就是不好 要精致的感觉 = 抄苹果要利用用户的固有习惯 = 抄同行要追求流行设计趋势 = 抄微信/淘宝/滴滴… 当务之急是抢占市场 = 快狂发补贴快速建立用户群体的壁垒 = 快拉他们进微信群要让用户产生自发传播 = 快让他们转发朋友圈 为了健康发展我们要启动下轮融资 = 公司没钱了我们辞退了一些跟不上公司发展的同事 = 公司没钱了打补贴战其实不符合我们公司的理念 = 公司没钱了 我们已经建立了客户基础 = 我们拉了个微信群我们已经建立了庞大的客户基础 = 一个群装不下，我们有两个微信群已经实现了O2O模式 = 我们有几个送外卖的从细分市场干起 = 我们的外卖只送这一片 采用了大数据技术 = 日志没清空过，都攒着呢，有什么用我也不知道采用了云技术 = 在IDC机房多租了几台服务器 我们在寻找合伙人 = 就差一个程序员了我们市场前景巨大 = 就差一个程序员了我们有绝妙的idea = 就差一个程序员了我们已经准备好了 = 就差风投来撒钱了我们正在全力占领市场 = 压根没想过怎么盈利我们非常欣赏您的投资理念 = 风投你该来B轮了 产品经理黑话产品设计应该大道至简 = 复杂的我也不会用户都应该用完即走 = 回不回来我不管这是常规的典型的做法 = 我抄的微信/淘宝/滴滴… 需求要抓住人性 = 多放美女照片得考虑用户的使用场景 = 加个夜间模式商业模式要形成闭环 = 放东西线上卖要搭建完善的用户运营体系 = 做个积分商城要有社交元素促进活跃度 = 塞一个IM 没有用户是因为没有做好运营 = 不是我的锅体验不好是因为技术实现问题 = 不是我的锅界面难看是因为设计水平不行 = 反正都不是我的锅 在吗？= 要改需求了哥哥最近累吗要不要喝奶茶 = 要改需求了下次肯定不改了 = 这次先改了再说这个好搞吗？＝不好搞也要想办法 你看我Axure画的 = 这个需求很简单这个需求很简单 = 怎么实现我不管怎么实现我不管 = 明天上线开发的怎么样了？＝怎么还没开发完 你的建议很好我们已经想到了 = 我擦说得真有道理赶紧提需求你的建议我们会考虑的 = 这建议好像有点蠢你的建议很有启发性 = 哈哈哈什么杰宝玩意儿我们尊重你的意见 = 这个版本不做 程序员黑话最近老加班＝老板该加工资了我回去评估一下技术难度＝先拖两天你这个需求不清晰 = 我不想做你确定有这个需求吗？＝做出来没人用老子跟你拼了 你怎么老改需求啊 = X了个X你怎么设计的这么复杂啊 = X了个X你怎么就给这么短时间啊 = X了个X 在吗？ = 要延期了弟弟最近累吗要不要喝奶茶 = 要延期了下次肯定不延期了 = 这次先应付了再说 你退后点说话 = 口水别喷到我宝贝键盘上你别把胸压到桌子上 = 我宝贝键盘会受不了的你告诉我输什么我自己来 = 你别用脏手碰我的宝贝键盘你告诉我往那晚自己来=别tm指我的Retina屏！ 你怎么还用 Word 啊？ = Markdown 才是最好的写作工具你怎么还在用 ThinkPad 啊？ = Mac 才是最好的电脑你怎么还在自学 Python 啊？ = PHP 才是最好的语言 招聘黑话适应较快的工作节奏 = 加班有强烈的上进心 = 加班喜欢有挑战性的工作 = 还是加班、并且前人留的坑不少能独立完成任务 = 前端后端运维测试都你一个人干 团队氛围很好 = 大家经常一起加班，一起吃加班餐弹性工作制 = 加班，且没有加班费上不封顶 = 下不保底上升空间大 = 工资低有股权 = 没那么多工资给你13 薪起 = 13 薪年底有奖金 = 大于 12 薪小于 13 薪 公司扁平化管理 = 领导和你坐一屋领导安排的其它任务 = 叫你干啥你就得干啥领导好 = 能陪你一起加班妹纸多 ＝ 公司一般，只能拿员工出来炫耀我们每天都有果盘 = 可能是公司唯一的福利了","categories":[],"tags":[{"name":"心路历程","slug":"心路历程","permalink":"http://xrhou.github.io/tags/心路历程/"}]},{"title":"Centos7 安装golang","slug":"Centos7-安装golang","date":"2017-07-19T06:02:55.000Z","updated":"2017-07-23T14:41:11.000Z","comments":true,"path":"2017/07/19/Centos7-安装golang/","link":"","permalink":"http://xrhou.github.io/2017/07/19/Centos7-安装golang/","excerpt":"Centos7的go语言安装","text":"Centos7的go语言安装使用二进制文件安装 1、下载二进制文件：1$ wget http://www.golangtc.com/static/go/1.6.2/go1.6.2.linux-amd64.tar.gz 2、解压并创建工作目录：123$ tar -zxf go1.6.2.linux-amd64.tar.gz -C /usr/local/$ mkdir /Golang 3、设置环境变量：在 /etc/profile 添加：1234567export GOROOT=/usr/local/go export GOBIN=$GOROOT/binexport GOPKG=$GOROOT/pkg/tool/linux_amd64 export GOARCH=amd64export GOOS=linuxexport GOPATH=/Golangexport PATH=$PATH:$GOBIN:$GOPKG:$GOPATH/bin 然后执行1source /etc/profile 使之生效。 4.编写demo程序验证下：4.1&gt; 编写demo程序：vi demo.go123456package mainimport \"fmt\"func main() &#123; fmt.Printf(\"Let's go\\n\")&#125; 4.2&gt; 编译运行：1$ go run demo.go 运行：1$ ./demo","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://xrhou.github.io/tags/golang/"}]},{"title":"长大后...","slug":"长大后","date":"2017-07-19T01:13:14.000Z","updated":"2017-07-23T14:43:02.000Z","comments":true,"path":"2017/07/19/长大后/","link":"","permalink":"http://xrhou.github.io/2017/07/19/长大后/","excerpt":"爸爸当上领导后，从来不敢多说话，生怕给别人带来压力。","text":"爸爸当上领导后，从来不敢多说话，生怕给别人带来压力。 上个月，爸爸的下属小李叔叔到我家来玩，爸爸随口说了句：“家里没空调，比较热，见笑了。” 第二天，小李叔叔带师傅给我家安装了5匹的大空调！怎么也不肯收钱。上个星期，爸爸看到老张伯伯在办公室吃午饭，其中有煎的鱼，随口说了句：“哎呦，真香！”！当天晚上。老张伯伯给我家送了一箱鲜鱼来。 有天晚上在路上，碰到单位的小王叔叔和他老婆逛街，爸爸随口称赞道：“哎呦，小王，你媳妇真漂亮！”第二天晚上，妈妈不在家，突然听到有人敲门，打开门一看，小王叔叔的媳妇站在门口，见到爸爸就满脸的微笑说：“领导，我们家小王说嫂子不在家，让我来陪陪你！” 当领导真好，我长大以后也要像爸爸一样当领导。当领导真好，怪不得那么多人喜欢当领导！ 儿子对他当局长的爸爸说：“我很喜欢楼下周副局长家的女儿！”局长偷偷说：“不行，那是你同父异母的妹妹！”儿子又说：“那我也喜欢隔壁王科长家的女儿！”局长又说：“那也不行，亦是你同父异母的妹妹，千万别对你妈说。”儿子只好偷偷跟妈妈说了。妈妈安慰儿子：“你喜欢谁就娶谁，别理他，市委黄书记才是你亲爹！ 天黑路滑，社会太复杂。","categories":[],"tags":[{"name":"心路历程","slug":"心路历程","permalink":"http://xrhou.github.io/tags/心路历程/"}]},{"title":"Spring Boot中文乱码解决","slug":"Spring-Boot中文乱码解决","date":"2017-07-17T08:14:56.000Z","updated":"2017-07-23T14:41:00.000Z","comments":true,"path":"2017/07/17/Spring-Boot中文乱码解决/","link":"","permalink":"http://xrhou.github.io/2017/07/17/Spring-Boot中文乱码解决/","excerpt":"使用SpringBoot开发，对外开放接口供调用，传入参数中有中文，出现中文乱码，废话少说，直接上代码。","text":"使用SpringBoot开发，对外开放接口供调用，传入参数中有中文，出现中文乱码，废话少说，直接上代码。解决乱码方法如下： 第一步,约定传参编码格式不管是使用httpclient，还是okhttp，都要设置传参的编码，为了统一，这里全部设置为utf-8 第二步，修改application.properties文件增加如下配置：12345678spring.http.encoding.force=truespring.http.encoding.charset=UTF-8spring.http.encoding.enabled=trueserver.tomcat.uri-encoding=UTF-8 此时拦截器中返回的中文已经不乱码了，但是controller中返回的数据依旧乱码。 第三步，修改controller的@RequestMapping修改如下：1produces=\"text/plain;charset=UTF-8\" 这种方法的弊端是限定了数据类型，继续查找资料，在stackoverflow上发现解决办法，是在配置类中增加如下代码： 12345678910111213141516171819202122@Configurationpublic class CustomMVCConfiguration extends WebMvcConfigurerAdapter &#123; @Bean public HttpMessageConverter&lt;String&gt; responseBodyConverter() &#123; StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset.forName(&quot;UTF-8&quot;)); return converter; &#125; @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; super.configureMessageConverters(converters); converters.add(responseBodyConverter()); &#125; @Override public void configureContentNegotiation( ContentNegotiationConfigurer configurer) &#123; configurer.favorPathExtension(false); &#125;&#125; 如此以上步骤走完可以解决SpringBoot的中文乱码问题了。","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://xrhou.github.io/tags/springboot/"}]},{"title":"iBATIS结果映射","slug":"iBATIS结果映射","date":"2017-07-17T06:01:02.000Z","updated":"2017-07-17T08:53:13.000Z","comments":true,"path":"2017/07/17/iBATIS结果映射/","link":"","permalink":"http://xrhou.github.io/2017/07/17/iBATIS结果映射/","excerpt":"以前使用的是hibernate的关系映射，换工作后新单位用dubbo框架，整个业务经常要使用ibatis结果集。进而针对ibatis的使用做个总结，好记心不如烂笔头，对自己的理解做个总结。","text":"以前使用的是hibernate的关系映射，换工作后新单位用dubbo框架，整个业务经常要使用ibatis结果集。进而针对ibatis的使用做个总结，好记心不如烂笔头，对自己的理解做个总结。resultMap的元素是在iBATIS的最重要和最强大的元素。您可以通过使用iBATIS的结果映射减少高达90％的JDBC编码，在某些情况下，可以让你做JDBC不支持的事情。ResultMaps的设计是这样的简单语句不需要明确的结果映射，以及更复杂的报表要求不超过绝对必要说明的关系。本章将只给你一个简单的介绍iBATIS的结果映射。 在MySQL中创建EMPLOYEE表：1234567CREATE TABLE EMPLOYEE ( id INT NOT NULL auto_increment, first_name VARCHAR(20) default NULL, last_name VARCHAR(20) default NULL, salary INT default NULL, PRIMARY KEY (id)); EMPLOYEE表有如下两条记录：12345678mysql&gt;select*from EMPLOYEE;+----+------------+-----------+--------+| id | first_name | last_name | salary |+----+------------+-----------+--------+|1|Zara|Ali|5000||2|HM|Ali|3000|+----+------------+-----------+--------+2 row inset(0.00 sec) Employee POJO 类:使用iBATIS的结果映射，需要修改Employee.java文件。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Created by houxiurong on 2017/7/17. */public class Employee &#123; private int id; private String first_name; private String last_name; private int salary; /* Define constructors for the Employee class. */ public Employee() &#123; &#125; public Employee(String fname, String lname, int salary) &#123; this.first_name = fname; this.last_name = lname; this.salary = salary; &#125; /* Here are the required method definitions */ public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getFirstName() &#123; return first_name; &#125; public void setFirstName(String fname) &#123; this.first_name = fname; &#125; public String getLastName() &#123; return last_name; &#125; public void setlastName(String lname) &#123; this.last_name = lname; &#125; public int getSalary() &#123; return salary; &#125; public void setSalary(int salary) &#123; this.salary = salary; &#125;&#125; Employee.xml 文件:在这里，我们将修改Employee.xml文件介绍标记。这个标签就必须在我们1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE sqlMap PUBLIC &quot;-//ibatis.apache.org//DTD SQL Map 2.0//EN&quot; &quot;http://ibatis.apache.org/dtd/sql-map-2.dtd&quot;&gt;&lt;sqlMap namespace=&quot;Employee&quot;&gt; &lt;!-- Using ResultMap --&gt; &lt;resultMap id=&quot;result&quot; class=&quot;Employee&quot;&gt; &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;first_name&quot; column=&quot;first_name&quot;/&gt; &lt;result property=&quot;last_name&quot; column=&quot;last_name&quot;/&gt; &lt;result property=&quot;salary&quot; column=&quot;salary&quot;/&gt; &lt;/resultMap&gt; &lt;!-- Perform Insert Operation --&gt; &lt;insert id=&quot;insert&quot; parameterClass=&quot;Employee&quot;&gt; &lt;selectKey resultClass=&quot;int&quot; keyProperty=&quot;id&quot;&gt; select last_insert_id() as id &lt;/selectKey&gt; INSERT INTO EMPLOYEE(first_name, last_name, salary) VALUES(#first_name#, #last_name#, #salary#) &lt;/insert&gt; &lt;!-- Perform Read Operation --&gt; &lt;select id=&quot;getAll&quot; resultClass=&quot;Employee&quot;&gt; SELECT * FROM EMPLOYEE &lt;/select&gt; &lt;!-- Perform Update Operation --&gt; &lt;update id=&quot;update&quot; parameterClass=&quot;Employee&quot;&gt; UPDATE EMPLOYEE SET first_name = #first_name# WHERE id = #id# &lt;/update&gt; &lt;!-- Perform Delete Operation --&gt; &lt;delete id=&quot;delete&quot; parameterClass=&quot;int&quot;&gt; DELETE FROM EMPLOYEE WHERE id = #id# &lt;/delete&gt; &lt;select id=&quot;useResultMap&quot; resultMap=&quot;result&quot;&gt; SELECT * FROM EMPLOYEE WHERE id=#id# &lt;/select&gt;&lt;/sqlMap&gt; IbatisResultMap.java 文件:文件将应用程序级别的逻辑，从使用结果映射Employee表中读取记录： 12345678910111213141516171819202122import com.ibatis.common.resources.Resources;import com.ibatis.sqlmap.client.SqlMapClient;import com.ibatis.sqlmap.client.SqlMapClientBuilder;import java.io.*;import java.sql.SQLException;import java.util.*;public class IbatisResultMap&#123; public static void main(String[] args)throws IOException,SQLException&#123; Reader rd =Resources.getResourceAsReader(&quot;SqlMapConfig.xml&quot;); SqlMapClient smc =SqlMapClientBuilder.buildSqlMapClient(rd); int id =1; System.out.println(&quot;Going to read record.....&quot;); Employee e =(Employee)smc.queryForObject(&quot;Employee.useResultMap&quot;, id); System.out.println(&quot;ID: &quot;+ e.getId()); System.out.println(&quot;First Name: &quot;+ e.getFirstName()); System.out.println(&quot;Last Name: &quot;+ e.getLastName()); System.out.println(&quot;Salary: &quot;+ e.getSalary()); System.out.println(&quot;Record read Successfully &quot;); &#125;&#125; 编译和运行：下面是步骤来编译并运行上述程序。请确保您已在进行的编译和执行之前，适当地设置PATH和CLASSPATH。 创建Employee.xml如上所示。 创建Employee.java如上所示，并编译它。 创建IbatisResultMap.java如上所示，并编译它。 执行IbatisResultMap二进制文件来运行程序。会得到下面的结果是对EMPLOYEE表的读操作。 123Going to read record..... ID:1 FirstName:Zara LastName:Ali Salary:5000 Record read Successfully","categories":[],"tags":[{"name":"ibatis","slug":"ibatis","permalink":"http://xrhou.github.io/tags/ibatis/"},{"name":"java","slug":"java","permalink":"http://xrhou.github.io/tags/java/"}]},{"title":"hexo-blog部署","slug":"我的hexo-blog","date":"2017-07-16T07:35:12.000Z","updated":"2017-07-16T14:10:27.000Z","comments":true,"path":"2017/07/16/我的hexo-blog/","link":"","permalink":"http://xrhou.github.io/2017/07/16/我的hexo-blog/","excerpt":"","text":"周末，两天没出门，除了下楼拿外卖，昨天研究了下layui前段框架。看到很多个人的blog在hexo的驱动下部署的个人blog,心血来潮，自己也弄了一个。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-07-16T06:00:17.000Z","updated":"2017-07-17T07:32:30.000Z","comments":true,"path":"2017/07/16/hello-world/","link":"","permalink":"http://xrhou.github.io/2017/07/16/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}